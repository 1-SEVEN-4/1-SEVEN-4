// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id               String      @id @default(uuid()) @db.Uuid
  name             String      @unique
  ownerNickName    String      @unique
  ownerPassword    String
  description      String
  photo            String?    
  tags             String[]    
  goalRep          Int
  discordURL       String
  invitationURL    String
  likeCount        Int         @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  memberCount      Int         @default(0)

  GroupTags        GroupTags[]
  Members          Members[]
  Records          Record[]
  GroupBadge       GroupBadge[]
}

enum BadgeType {
  likeCountbadge
  recordbadge
  memberBadges
}

model GroupBadge {
  groupBadgeId     String   @id @default(uuid()) @db.Uuid
  groupBadgeName   BadgeType  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  groupId          String   @db.Uuid

  group            Group    @relation(fields: [groupId], references: [id],onDelete: Cascade)
}
  
model GroupTags {
  id               String   @id @default(uuid()) @db.Uuid
  content          String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  groupId          String   @db.Uuid
  group            Group    @relation(fields: [groupId], references: [id])
}

model Members {
  id               String   @id @default(uuid()) @db.Uuid
  nickName         String
  password         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  groupId          String   @db.Uuid
  group            Group    @relation(fields: [groupId], references: [id],onDelete: Cascade)

  Record Record[]
}

model Record {
  id               String   @id @default(uuid()) @db.Uuid
  nickName         String
  password         String
  sports           String
  description      String
  time             Int
  distance         Int
  photo            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  memberId         String   @db.Uuid
  groupId          String   @db.Uuid

  member           Members  @relation(fields: [memberId], references: [id])
  group            Group    @relation(fields: [groupId], references: [id])
}

