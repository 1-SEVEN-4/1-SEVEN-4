// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id            String       @id @default(uuid())
  name          String       @unique
  ownerNickname String       @unique
  ownerPassword String
  description   String
  photo         String?
  tags          String[]
  goalRep       Int
  discordURL    String
  invitationURL String
  likeCount     Int          @default(0)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  memberCount   Int          @default(1)
  groupTags     GroupTag[]
  members       Members[]
  records       Record[]
  groupBadge    GroupBadge[]
}

model GroupBadge {
  groupBadgeId   String    @id @default(uuid())
  groupBadgeName BadgeType
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  groupId        String
  groups         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupTag {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String
  groups    Group    @relation(fields: [groupId], references: [id])
}

model Members {
  id        String   @id @default(uuid())
  nickName  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String
  groups    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  records   Record[]
}

model Record {
  id          String   @id @default(uuid())
  sports      Sports
  description String
  time        String
  distance    Int
  photo       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  memberId    String
  groupId     String
  members     Members  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  groups      Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

enum Sports {
  RUNNING
  CYCLING
  SWIMMING
}

enum BadgeType {
  likeCountbadge
  recordBadge
  likeCountBadge
  recordBadge
  memberBadges
}
